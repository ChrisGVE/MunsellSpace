[38;2;127;132;156m   1[0m [38;2;205;214;244muse munsellspace::mathematical::MathematicalMunsellConverter;[0m
[38;2;127;132;156m   2[0m [38;2;205;214;244muse munsellspace::illuminants::{Illuminant, ChromaticAdaptationMethod};[0m
[38;2;127;132;156m   3[0m 
[38;2;127;132;156m   4[0m [38;2;205;214;244mfn main() {[0m
[38;2;127;132;156m   5[0m [38;2;205;214;244m    // Test the first few colors to find which one causes "PR"[0m
[38;2;127;132;156m   6[0m [38;2;205;214;244m    let test_colors = vec\![[0m
[38;2;127;132;156m   7[0m [38;2;205;214;244m        ([255, 255, 255], "white"),[0m
[38;2;127;132;156m   8[0m [38;2;205;214;244m        ([0, 0, 0], "black"),[0m
[38;2;127;132;156m   9[0m [38;2;205;214;244m        ([255, 0, 0], "red"),[0m
[38;2;127;132;156m  10[0m [38;2;205;214;244m        ([0, 255, 0], "green"),[0m
[38;2;127;132;156m  11[0m [38;2;205;214;244m        ([0, 0, 255], "blue"),[0m
[38;2;127;132;156m  12[0m [38;2;205;214;244m        // Add more if needed[0m
[38;2;127;132;156m  13[0m [38;2;205;214;244m    ];[0m
[38;2;127;132;156m  14[0m [38;2;205;214;244m    [0m
[38;2;127;132;156m  15[0m [38;2;205;214;244m    for (rgb, name) in test_colors {[0m
[38;2;127;132;156m  16[0m [38;2;205;214;244m        println\!("Testing {}: RGB {:?}", name, rgb);[0m
[38;2;127;132;156m  17[0m [38;2;205;214;244m        [0m
[38;2;127;132;156m  18[0m [38;2;205;214;244m        match MathematicalMunsellConverter::with_illuminants([0m
[38;2;127;132;156m  19[0m [38;2;205;214;244m            Illuminant::D65,[0m
[38;2;127;132;156m  20[0m [38;2;205;214;244m            Illuminant::A,[0m
[38;2;127;132;156m  21[0m [38;2;205;214;244m            ChromaticAdaptationMethod::Bradford,[0m
[38;2;127;132;156m  22[0m [38;2;205;214;244m        ) {[0m
[38;2;127;132;156m  23[0m [38;2;205;214;244m            Ok(converter) => {[0m
[38;2;127;132;156m  24[0m [38;2;205;214;244m                match converter.srgb_to_munsell(rgb) {[0m
[38;2;127;132;156m  25[0m [38;2;205;214;244m                    Ok(munsell) => {[0m
[38;2;127;132;156m  26[0m [38;2;205;214;244m                        println\!("  Result: {:.1}{} {:.1}/{:.1}", [0m
[38;2;127;132;156m  27[0m [38;2;205;214;244m                            munsell.hue, munsell.family, munsell.value, munsell.chroma);[0m
[38;2;127;132;156m  28[0m [38;2;205;214;244m                    },[0m
[38;2;127;132;156m  29[0m [38;2;205;214;244m                    Err(e) => {[0m
[38;2;127;132;156m  30[0m [38;2;205;214;244m                        println\!("  Error: {}", e);[0m
[38;2;127;132;156m  31[0m [38;2;205;214;244m                    }[0m
[38;2;127;132;156m  32[0m [38;2;205;214;244m                }[0m
[38;2;127;132;156m  33[0m [38;2;205;214;244m            },[0m
[38;2;127;132;156m  34[0m [38;2;205;214;244m            Err(e) => {[0m
[38;2;127;132;156m  35[0m [38;2;205;214;244m                println\!("  Converter error: {}", e);[0m
[38;2;127;132;156m  36[0m [38;2;205;214;244m            }[0m
[38;2;127;132;156m  37[0m [38;2;205;214;244m        }[0m
[38;2;127;132;156m  38[0m [38;2;205;214;244m    }[0m
[38;2;127;132;156m  39[0m [38;2;205;214;244m}[0m
