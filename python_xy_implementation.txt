Python's xy_from_renotation_ovoid implementation:
================================================================================
def xy_from_renotation_ovoid(specification: ArrayLike) -> NDArrayFloat:
    """
    Convert given *Munsell* *Colorlab* specification to *CIE xy* chromaticity
    coordinates on *Munsell Renotation System* ovoid.
    The *CIE xy* point will be on the ovoid about the achromatic point,
    corresponding to the *Munsell* *Colorlab* specification
    value and chroma.

    Parameters
    ----------
    specification
        *Munsell* *Colorlab* specification.

    Returns
    -------
    :class:`numpy.NDArrayFloat`
        *CIE xy* chromaticity coordinates.

    Raises
    ------
    ValueError
        If an invalid interpolation method is retrieved from internal
        computations.

    References
    ----------
    :cite:`Centore2014n`

    Examples
    --------
    >>> xy_from_renotation_ovoid([2.5, 5.0, 12.0, 4])
    ... # doctest: +ELLIPSIS
    array([ 0.4333...,  0.5602...])
    >>> xy_from_renotation_ovoid([np.nan, 8, np.nan, np.nan])
    ... # doctest: +ELLIPSIS
    array([ 0.31006...,  0.31616...])
    """

    specification = normalise_munsell_specification(specification)

    if is_grey_munsell_colour(specification):
        return CCS_ILLUMINANT_MUNSELL
    else:
        hue, value, chroma, code = specification

        attest(
            1 <= value <= 9,
            f'"{specification}" specification value must be normalised to '
            f"domain [1, 9]!",
        )

        attest(
            is_integer(value),
            f'"{specification}" specification value must be an int!',
        )

        value = round(value)

        attest(
            2 <= chroma <= 50,
            f'"{specification}" specification chroma must be normalised to '
            f"domain [2, 50]!",
        )

        attest(
            abs(2 * (chroma / 2 - round(chroma / 2))) <= THRESHOLD_INTEGER,
            f'"{specification}" specification chroma must be an int and '
            f"multiple of 2!",
        )

        chroma = 2 * round(chroma / 2)

        # Checking if renotation data is available without interpolation using
        # given threshold.
        if (
            abs(hue) < THRESHOLD_INTEGER
            or abs(hue - 2.5) < THRESHOLD_INTEGER
            or abs(hue - 5) < THRESHOLD_INTEGER
            or abs(hue - 7.5) < THRESHOLD_INTEGER
            or abs(hue - 10) < THRESHOLD_INTEGER
        ):
            hue = 2.5 * round(hue / 2.5)

            x, y, _Y = xyY_from_renotation([hue, value, chroma, code])

            return tstack([x, y])

        hue_code_cw, hue_code_ccw = bounding_hues_from_renotation([hue, code])
        hue_minus, code_minus = hue_code_cw
        hue_plus, code_plus = hue_code_ccw

        x_grey, y_grey = CCS_ILLUMINANT_MUNSELL

        specification_minus = (hue_minus, value, chroma, code_minus)
        x_minus, y_minus, Y_minus = xyY_from_renotation(specification_minus)
        rho_minus, phi_minus, _z_minus = cartesian_to_cylindrical(
            [x_minus - x_grey, y_minus - y_grey, Y_minus]
        )
        phi_minus = np.degrees(phi_minus)

        specification_plus = (hue_plus, value, chroma, code_plus)
        x_plus, y_plus, Y_plus = xyY_from_renotation(specification_plus)
        rho_plus, phi_plus, _z_plus = cartesian_to_cylindrical(
            [x_plus - x_grey, y_plus - y_grey, Y_plus]
        )
        phi_plus = np.degrees(phi_plus)

        hue_angle_lower = hue_to_hue_angle([hue_minus, code_minus])
        hue_angle = hue_to_hue_angle([hue, code])
        hue_angle_upper = hue_to_hue_angle([hue_plus, code_plus])

        if phi_minus - phi_plus > 180:
            phi_plus += 360

        if hue_angle_lower == 0:
            hue_angle_lower = 360

        if hue_angle_lower > hue_angle_upper:
            if hue_angle_lower > hue_angle:
                hue_angle_lower -= 360
            else:
                hue_angle_lower -= 360
                hue_angle -= 360

        interpolation_method = interpolation_method_from_renotation_ovoid(specification)

        attest(
            interpolation_method is not None,
            f"Interpolation method must be one of: "
            f"\"{', '.join(['Linear', 'Radial'])}\"",
        )

        hue_angle_lower_upper = np.squeeze([hue_angle_lower, hue_angle_upper])

        if interpolation_method == "Linear":
            x_minus_plus = np.squeeze([x_minus, x_plus])
            y_minus_plus = np.squeeze([y_minus, y_plus])

            x = LinearInterpolator(hue_angle_lower_upper, x_minus_plus)(hue_angle)
            y = LinearInterpolator(hue_angle_lower_upper, y_minus_plus)(hue_angle)
        elif interpolation_method == "Radial":
            rho_minus_plus = np.squeeze([rho_minus, rho_plus])
            phi_minus_plus = np.squeeze([phi_minus, phi_plus])

            rho = as_float_array(
                LinearInterpolator(hue_angle_lower_upper, rho_minus_plus)(hue_angle)
            )
            phi = as_float_array(
                LinearInterpolator(hue_angle_lower_upper, phi_minus_plus)(hue_angle)
            )

            rho_phi = np.squeeze([rho, np.radians(phi)])
            x, y = tsplit(polar_to_cartesian(rho_phi) + tstack([x_grey, y_grey]))

        return tstack([x, y])



xyY_from_renotation implementation:
================================================================================
def xyY_from_renotation(
    specification: ArrayLike,
    absolute_tolerance: float = TOLERANCE_ABSOLUTE_DEFAULT,
    relative_tolerance: float = TOLERANCE_RELATIVE_DEFAULT,
) -> NDArrayFloat:
    """
    Return given existing *Munsell* *Colorlab* specification *CIE xyY*
    colourspace vector from *Munsell Renotation System* data.

    Parameters
    ----------
    specification
        *Munsell* *Colorlab* specification.
    absolute_tolerance
        Absolute tolerance to find the existing *Munsell Renotation System*
        data.
    relative_tolerance
        Relative tolerance to find the existing *Munsell Renotation System*
        data.

    Returns
    -------
    :class:`numpy.NDArrayFloat`
        *CIE xyY* colourspace vector.

    Raises
    ------
    ValueError
        If the given specification doesn't exist in *Munsell Renotation System*
        data.

    Examples
    --------
    >>> xyY_from_renotation(np.array([2.5, 0.2, 2.0, 4]))  # doctest: +ELLIPSIS
    array([ 0.71...,  1.41...,  0.23...])
    """

    specification = normalise_munsell_specification(specification)

    try:
        index = np.argwhere(
            np.all(
                np.isclose(
                    specification,
                    _munsell_specifications(),
                    atol=absolute_tolerance,
                    rtol=relative_tolerance,
                ),
                axis=-1,
            )
        )

        return MUNSELL_COLOURS_ALL[as_int_scalar(index[0])][1]
    except Exception as error:
        raise ValueError(
            f'"{specification}" specification does not exists in '
            '"Munsell Renotation System" data!'
        ) from error



interpolation_method_from_renotation_ovoid implementation:
================================================================================
def interpolation_method_from_renotation_ovoid(
    specification: ArrayLike,
) -> Literal["Linear", "Radial"] | None:
    """
    Return whether to use linear or radial interpolation when drawing ovoids
    through data points in the *Munsell Renotation System* data from given
    specification.

    Parameters
    ----------
    specification
        *Munsell* *Colorlab* specification.

    Returns
    -------
    :py:data:`None` or :class:`str`
        Interpolation method.

    References
    ----------
    :cite:`Centore2014l`

    Examples
    --------
    >>> interpolation_method_from_renotation_ovoid([2.5, 5.0, 12.0, 4])
    'Radial'
    """

    specification = normalise_munsell_specification(specification)

    interpolation_methods: Dict[int, Literal["Linear", "Radial"] | None] = {
        0: None,
        1: "Linear",
        2: "Radial",
    }

    if is_grey_munsell_colour(specification):
        # No interpolation needed for grey colours.
        interpolation_method = 0
    else:
        hue, value, chroma, code = specification

        attest(
            0 <= value <= 10,
            f'"{specification}" specification value must be normalised to '
            f"domain [0, 10]!",
        )

        attest(
            is_integer(value),
            f'"{specification}" specification value must be an int!',
        )

        value = round(value)

        attest(
            2 <= chroma <= 50,
            f'"{specification}" specification chroma must be normalised to '
            f"domain [2, 50]!",
        )

        attest(
            abs(2 * (chroma / 2 - round(chroma / 2))) <= THRESHOLD_INTEGER,
            f'"{specification}" specification chroma must be an int and '
            f"multiple of 2!",
        )

        chroma = 2 * round(chroma / 2)

        interpolation_method = 0

        # Standard Munsell Renotation System hue, no interpolation needed.
        if hue % 2.5 == 0:
            interpolation_method = 0

        ASTM_hue = hue_to_ASTM_hue([hue, code])

        if value == 1:
            if chroma == 2:
                if 15 < ASTM_hue < 30 or 60 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 4:
                if 12.5 < ASTM_hue < 27.5 or 57.5 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 6:
                interpolation_method = 2 if 55 < ASTM_hue < 80 else 1
            elif chroma == 8:
                interpolation_method = 2 if 67.5 < ASTM_hue < 77.5 else 1
            elif chroma >= 10:
                # NOTE: This condition is likely never "True" while producing a
                # valid "Munsell Specification" in practice: 1M iterations with
                # random numbers never reached this code path while producing a
                # valid "Munsell Specification".
                if 72.5 < ASTM_hue < 77.5:  # pragma: no cover # noqa: SIM108
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 2:
            if chroma == 2:
                if 15 < ASTM_hue < 27.5 or 77.5 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 4:
                if 12.5 < ASTM_hue < 30 or 62.5 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 6:
                if 7.5 < ASTM_hue < 22.5 or 62.5 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 8:
                if 7.5 < ASTM_hue < 15 or 60 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma >= 10:
                interpolation_method = 2 if 65 < ASTM_hue < 77.5 else 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 3:
            if chroma == 2:
                if 10 < ASTM_hue < 37.5 or 65 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 4:
                if 5 < ASTM_hue < 37.5 or 55 < ASTM_hue < 72.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma in (6, 8, 10):
                if 7.5 < ASTM_hue < 37.5 or 57.5 < ASTM_hue < 82.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma >= 12:
                if 7.5 < ASTM_hue < 42.5 or 57.5 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 4:
            if chroma in (2, 4):
                if 7.5 < ASTM_hue < 42.5 or 57.5 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma in (6, 8):
                if 7.5 < ASTM_hue < 40 or 57.5 < ASTM_hue < 82.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma >= 10:
                if 7.5 < ASTM_hue < 40 or 57.5 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 5:
            if chroma == 2:
                if 5 < ASTM_hue < 37.5 or 55 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma in (4, 6, 8):
                if 2.5 < ASTM_hue < 42.5 or 55 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma >= 10:
                if 2.5 < ASTM_hue < 42.5 or 55 < ASTM_hue < 82.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 6:
            if chroma in (2, 4):
                if 5 < ASTM_hue < 37.5 or 55 < ASTM_hue < 87.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 6:
                if 5 < ASTM_hue < 42.5 or 57.5 < ASTM_hue < 87.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma in (8, 10):
                if 5 < ASTM_hue < 42.5 or 60 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma in (12, 14):
                if 5 < ASTM_hue < 42.5 or 60 < ASTM_hue < 82.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma >= 16:
                if 5 < ASTM_hue < 42.5 or 60 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 7:
            if chroma in (2, 4, 6):
                if 5 < ASTM_hue < 42.5 or 60 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 8:
                if 5 < ASTM_hue < 42.5 or 60 < ASTM_hue < 82.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 10:
                if 30 < ASTM_hue < 42.5 or 5 < ASTM_hue < 25 or 60 < ASTM_hue < 82.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma == 12:
                if (
                    30 < ASTM_hue < 42.5
                    or 7.5 < ASTM_hue < 27.5
                    or 80 < ASTM_hue < 82.5
                ):
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma >= 14:
                if 32.5 < ASTM_hue < 40 or 7.5 < ASTM_hue < 15 or 80 < ASTM_hue < 82.5:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 8:
            if chroma in (2, 4, 6, 8, 10, 12):
                if 5 < ASTM_hue < 40 or 60 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma >= 14:
                if 32.5 < ASTM_hue < 40 or 5 < ASTM_hue < 15 or 60 < ASTM_hue < 85:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 9:
            if chroma in (2, 4):
                if 5 < ASTM_hue < 40 or 55 < ASTM_hue < 80:
                    interpolation_method = 2
                else:
                    interpolation_method = 1
            elif chroma in (6, 8, 10, 12, 14):
                interpolation_method = 2 if 5 < ASTM_hue < 42.5 else 1
            elif chroma >= 16:
                interpolation_method = 2 if 35 < ASTM_hue < 42.5 else 1
            else:  # pragma: no cover
                interpolation_method = 1
        elif value == 10:
            # Ideal white, no interpolation needed.
            interpolation_method = 0

    return interpolation_methods[interpolation_method]

