#!/usr/bin/env python3
"""Check which functions are still missing"""

needed_functions = [
    'munsell_colour_to_munsell_specification',
    'munsell_specification_to_munsell_colour', 
    'xyY_to_munsell_colour',
    'munsell_colour_to_xyY',
    'parse_munsell_colour',
    'munsell_value',
    'munsell_specification_to_xyY',
    'xyY_to_munsell_specification',
    'is_grey_munsell_colour',
    'normalise_munsell_specification',
    'xy_from_renotation_ovoid',
    'hue_to_hue_angle',
    'hue_angle_to_hue',
    'hue_to_ASTM_hue',
    'interpolation_method_from_renotation_ovoid',
    'xy_from_renotation_ovoid_interpolated',
    'munsell_value_ASTMD1535',
    'munsell_specification_to_xy',
    'luminance_ASTMD1535',
    'is_within_macadam_limits',
    'xyY_from_renotation',
    'bounding_hues_from_renotation',
    'maximum_chroma_from_renotation',
    'cartesian_to_cylindrical',
    'polar_to_cartesian',
    'ASTM_hue_to_hue',
    # Additional value methods
    'munsell_value_Priest1920',
    'munsell_value_Munsell1933',
    'munsell_value_Moon1943',
    'munsell_value_Saunderson1944',
    'munsell_value_Ladd1955',
    'munsell_value_McCamy1987',
    # Lab functions
    'XYZ_to_Lab',
    'Lab_to_XYZ',
    'Lab_to_LCHab',
    'LCHab_to_Lab',
    'LCHab_to_munsell_specification',
    # Utilities
    'is_specification_in_renotation',
    'sdiv',
    'spow',
    'tsplit',
    'tstack',
    'as_float',
    'as_float_scalar',
    'as_int_scalar',
    'is_numeric',
    'is_integer',
    'euclidean_distance',
    'to_domain_1',
    'from_range_1',
    'to_domain_10',
    'from_range_10',
    'to_domain_100',
    'from_range_100',
    # XYZ functions
    'sRGB_to_XYZ',
    'XYZ_to_xy',
    'xyY_to_XYZ',
]

ported_functions = [
    'as_float',
    'as_float_scalar',
    'as_int_scalar',
    'astm_hue_to_hue',
    'bounding_hues_from_renotation',
    'cache_munsell_to_xyy',
    'cache_xyy_to_munsell',
    'cartesian_to_cylindrical',
    'cast',
    'clear_all_caches',
    'euclidean_distance',
    'from_range_1',
    'from_range_10',
    'from_range_100',
    'get_cached_munsell_to_xyy',
    'get_cached_xyy_to_munsell',
    'get_domain_range_scale',
    'hue_angle_to_hue',
    'hue_to_astm_hue',
    'hue_to_hue_angle',
    'interpolation_method_from_renotation_ovoid',
    'is_caching_enabled',
    'is_grey_munsell_colour',
    'is_integer',
    'is_numeric',
    'is_specification_in_renotation',
    'is_within_macadam_limits',
    'lab_to_lchab',
    'lab_to_xyz',
    'lchab_to_lab',
    'lchab_to_munsell_specification',
    'linear_interp',
    'linear_interp_clamped',
    'luminance_astmd1535',
    'maximum_chroma_from_renotation',
    'munsell_colour_to_munsell_specification',
    'munsell_colour_to_xyy',
    'munsell_specification_to_munsell_colour',
    'munsell_specification_to_xy',
    'munsell_specification_to_xyy',
    'munsell_value',
    'munsell_value_astmd1535',
    'munsell_value_ladd1955',
    'munsell_value_mccamy1987',
    'munsell_value_moon1943',
    'munsell_value_munsell1933',
    'munsell_value_priest1920',
    'munsell_value_saunderson1944',
    'normalise_munsell_specification',
    'parse_munsell_colour',
    'polar_to_cartesian',
    'sdiv',
    'spow',
    'srgb_to_xyz',
    'to_domain_1',
    'to_domain_10',
    'to_domain_100',
    'tsplit',
    'tstack',
    'usage_warning',
    'xy_from_renotation_ovoid',
    'xy_from_renotation_ovoid_interpolated',
    'xyy_from_renotation',
    'xyy_to_munsell_colour',
    'xyy_to_munsell_specification',
    'xyy_to_xyz',
    'xyz_to_lab',
    'xyz_to_xy',
]

# Normalize function names for comparison (handle case differences)
needed_normalized = {f.lower().replace('_', ''): f for f in needed_functions}
ported_normalized = {f.lower().replace('_', ''): f for f in ported_functions}

print("=" * 80)
print("FUNCTIONS STILL MISSING:")
print("=" * 80)
missing = []
for key, func in needed_normalized.items():
    if key not in ported_normalized:
        missing.append(func)
        print(f"- {func}")

print("\n" + "=" * 80)
print(f"SUMMARY: {len(ported_functions)} functions ported, {len(missing)} still missing")
print("=" * 80)